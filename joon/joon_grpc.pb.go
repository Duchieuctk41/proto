// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: joon/joon.proto

package joon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JoonClient is the client API for Joon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoonClient interface {
	HasRole(ctx context.Context, in *HasRoleReq, opts ...grpc.CallOption) (*HasRoleRes, error)
}

type joonClient struct {
	cc grpc.ClientConnInterface
}

func NewJoonClient(cc grpc.ClientConnInterface) JoonClient {
	return &joonClient{cc}
}

func (c *joonClient) HasRole(ctx context.Context, in *HasRoleReq, opts ...grpc.CallOption) (*HasRoleRes, error) {
	out := new(HasRoleRes)
	err := c.cc.Invoke(ctx, "/joon.Joon/HasRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoonServer is the server API for Joon service.
// All implementations must embed UnimplementedJoonServer
// for forward compatibility
type JoonServer interface {
	HasRole(context.Context, *HasRoleReq) (*HasRoleRes, error)
	mustEmbedUnimplementedJoonServer()
}

// UnimplementedJoonServer must be embedded to have forward compatible implementations.
type UnimplementedJoonServer struct {
}

func (UnimplementedJoonServer) HasRole(context.Context, *HasRoleReq) (*HasRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRole not implemented")
}
func (UnimplementedJoonServer) mustEmbedUnimplementedJoonServer() {}

// UnsafeJoonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoonServer will
// result in compilation errors.
type UnsafeJoonServer interface {
	mustEmbedUnimplementedJoonServer()
}

func RegisterJoonServer(s grpc.ServiceRegistrar, srv JoonServer) {
	s.RegisterService(&Joon_ServiceDesc, srv)
}

func _Joon_HasRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoonServer).HasRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joon.Joon/HasRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoonServer).HasRole(ctx, req.(*HasRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Joon_ServiceDesc is the grpc.ServiceDesc for Joon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Joon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "joon.Joon",
	HandlerType: (*JoonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasRole",
			Handler:    _Joon_HasRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joon/joon.proto",
}
